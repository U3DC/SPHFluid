#pragma kernel BuildGrid
#pragma kernel ClearGridIndices
#pragma kernel BuildGridIndices
#pragma kernel RearrangeParticles
#pragma kernel Density
#pragma kernel Force
#pragma kernel Integrate

#include "UnityCG.cginc"
#define BLOCK_SIZE 256

struct Particle
{
	float2 position;
	float2 velocity;
};

struct ParticleForce
{
	float2 acceleration;
};

struct ParticleDensity
{
	float  density;
};

cbuffer Constants
{
	float  _RestDensity;
	float  _PressureCoef;
	float  _Mass;
	float  _EffectiveRadius;
	float  _TimeStep;
	float  _Viscosity;
	float  _WallStiffness;
	float4 _Gravity;
	float4 _GridDim;
	uint   _MaxParticles;
	float  _Poly6Kernel;
	float  _SpikeyKernel;
	float  _LapKernel;
	float4 _WallNormals[4];
}

StructuredBuffer<Particle> _ParticlesRead;
RWStructuredBuffer<Particle> _ParticlesWrite;

StructuredBuffer<ParticleDensity> _ParticlesDensityRead;
RWStructuredBuffer<ParticleDensity> _ParticlesDensityWrite;

StructuredBuffer<ParticleForce> _ParticlesForceRead;
RWStructuredBuffer<ParticleForce> _ParticlesForceWrite;

StructuredBuffer<uint> _GridRead;
RWStructuredBuffer<uint> _GridWrite;

StructuredBuffer<uint2> _GridIndicesRead;
RWStructuredBuffer<uint2> _GridIndicesWrite;

//--------------------------------------------------------------------------------------
// Grid Calculation
//--------------------------------------------------------------------------------------

float2 GridCalculateCell(float2 position)
{
	// 粒子の位置の座標を探索サイズの格子単位の座標系に変換
	return clamp(position * _GridDim.xy + _GridDim.zw, float2(0, 0), float2(255, 255));
}

uint GridConstructKey(uint2 xy)
{
	// Bit pack [-----UNUSED-----][----Y----][----X----]
	//                16-bit         8-bit      8-bit
	return dot(xy.yx, uint2(256, 1));
}

uint GridConstructKeyValuePair(uint2 xy, uint value)
{
	// 粒子の位置・IDから格子を生成
	// Bit pack [----Y----][----X----][-----VALUE-----]
	//             8-bit      8-bit         16-bit
	return dot(uint3(xy.yx, value), uint3(256 * 256 * 256, 256 * 256, 1));
}

uint GridGetKey(uint keyValuePair)
{
	return (keyValuePair >> 16);
}

uint GridGetValue(uint keyValuePair)
{
	return (keyValuePair & 0xFFFF);
}

//--------------------------------------------------------------------------------------
// Build Grid
//--------------------------------------------------------------------------------------

[numthreads(BLOCK_SIZE, 1, 1)]
void BuildGrid(uint3 DTid : SV_DispatchThreadID)
{
	const uint P_id = DTid.x; // Particle ID

	float2 position = _ParticlesRead[P_id].position;
	float2 grid_xy = GridCalculateCell(position);

	_GridWrite[P_id] = GridConstructKeyValuePair((uint2)grid_xy, P_id);
}

//--------------------------------------------------------------------------------------
// Clear Grid Indices
//--------------------------------------------------------------------------------------

[numthreads(BLOCK_SIZE, 1, 1)]
void ClearGridIndices(uint3 DTid : SV_DispatchThreadID)
{
	_GridIndicesWrite[DTid.x] = uint2(0, 0);
}

//--------------------------------------------------------------------------------------
// Build Grid Indices
//--------------------------------------------------------------------------------------

[numthreads(BLOCK_SIZE, 1, 1)]
void BuildGridIndices(uint3 DTid : SV_DispatchThreadID)
{
	const uint G_id = DTid.x; // Grid ID
	uint G_id_prev = (G_id == 0) ? _MaxParticles - 1 : G_id - 1;
	uint G_id_next = (G_id + 1 == _MaxParticles) ? 0 : G_id + 1;

	uint cell      = GridGetKey(_GridRead[G_id]);
	uint cell_prev = GridGetKey(_GridRead[G_id_prev]);
	uint cell_next = GridGetKey(_GridRead[G_id_next]);

	if (cell != cell_prev)
	{
		_GridIndicesWrite[cell].x = G_id;
	}

	if (cell != cell_next)
	{
		_GridIndicesWrite[cell].y = G_id + 1;
	}
}

//--------------------------------------------------------------------------------------
// Rearrange Particles
//--------------------------------------------------------------------------------------

[numthreads((BLOCK_SIZE), 1, 1)]
void RearrangeParticles(uint3 DTid : SV_DispatchThreadID)
{
	const uint P_id = DTid.x;
	const uint G_id = GridGetValue(_GridRead[P_id]);
	_ParticlesWrite[P_id] = _ParticlesRead[G_id];
}

//--------------------------------------------------------------------------------------
// Density Calculation
//--------------------------------------------------------------------------------------

float CalculateDensity(float r_sq)
{
	const float h_sq = _EffectiveRadius * _EffectiveRadius;
	// Implements this equation:
	// W_poly6(r, h) = 315 / (64 * PI * h^9) * (h^2 - r^2)^3
	// g_fDensityCoef = fParticleMass * 315.0f / (64.0f * PI * fSmoothlen^9)
	// return g_fDensityCoef * (h_sq - r_sq) * (h_sq - r_sq) * (h_sq - r_sq);
	return _Mass * _Poly6Kernel * (h_sq - r_sq) * (h_sq - r_sq) * (h_sq - r_sq);
}

[numthreads(BLOCK_SIZE, 1, 1)]
void Density(uint3 DTid : SV_DispatchThreadID, uint GI : SV_GroupIndex)
{
	const uint P_id = DTid.x;
	const float h_sq = _EffectiveRadius * _EffectiveRadius;
	float2 P_position = _ParticlesRead[P_id].position;
	float density = 0;

	// Calculate the density based on neighbors from the 8 adjacent cells + current cell
	int2 G_xy = (int2)GridCalculateCell(P_position);
	for (int y = max(G_xy.y - 1, 0); y <= min(G_xy.y + 1, 255); y++)
	{
		for (int x = max(G_xy.x - 1, 0); x <= min(G_xy.x + 1, 255); x++)
		{
			uint G_cell = GridConstructKey(uint2(x, y));
			uint2 G_start_end = _GridIndicesRead[G_cell];
			for (uint N_id = G_start_end.x; N_id < G_start_end.y; N_id++)
			{
				float2 N_position = _ParticlesRead[N_id].position;
				float2 diff = N_position - P_position;
				float r_sq = dot(diff, diff);
				if (r_sq < h_sq)
				{
					density += CalculateDensity(r_sq);
				}
			}
		}
	}

	_ParticlesDensityWrite[P_id].density = density;
}

//--------------------------------------------------------------------------------------
// Force Calculation
//--------------------------------------------------------------------------------------

float CalculatePressure(float density)
{
	// Implements this equation (Tait Equation):
	// Pressure = B * ((rho / rho_0)^y  - 1)
	// B : 圧力定数, rho : 密度, rho_0 : 初期密度, y : 物質定数
	return _PressureCoef * max(pow(density / _RestDensity, 3) - 1, 0);
}

float2 CalculateGradPressure(float r, float P_pressure, float N_pressure, float N_density, float2 diff)
{
	const float h = _EffectiveRadius;
	float avgPressure = 0.5f * (N_pressure + P_pressure);
	// Implements this function:
	// GRAD( W_spikey(r, h) ) = -45 / (PI * h^6) * (h - r)^2
	// r : 相対距離, h : 有効半径
	// g_fGradPressureCoef = fParticleMass * -45.0f / (PI * fSmoothlen^6)
	// return g_fGradPressureCoef * avg_pressure / N_density * (h - r) * (h - r) / r * (diff);
	return _Mass * _SpikeyKernel * avgPressure / N_density * (h - r) * (h - r) / r * diff;
}

float2 CalculateLapVelocity(float r, float2 P_velocity, float2 N_velocity, float N_density)
{
	const float h = _EffectiveRadius;
	float2 velDiff = (N_velocity - P_velocity);
	// Implements this equation:
	// W_viscosity(r, h) = 15 / (2 * PI * h^3) * (-r^3 / (2 * h^3) + r^2 / h^2 + h / (2 * r) - 1)
	// LAPLACIAN( W_viscosity(r, h) ) = 45 / (PI * h^6) * (h - r)
	// r : 相対距離, h : 有効半径
	// g_fLapViscosityCoef = fParticleMass * fViscosity * 45.0f / (PI * fSmoothlen^6)
	// return g_fLapViscosityCoef / N_density * (h - r) * vel_diff;
	return _Mass * _Viscosity * _LapKernel / N_density * (h - r) * velDiff;
}

[numthreads(BLOCK_SIZE, 1, 1)]
void Force(uint3 DTid : SV_DispatchThreadID, uint GI : SV_GroupIndex)
{
	const uint P_id = DTid.x;
	
	float2 P_position = _ParticlesRead[P_id].position;
	float2 P_velocity = _ParticlesRead[P_id].velocity;
	float  P_density  = _ParticlesDensityRead[P_id].density;
	float  P_pressure = CalculatePressure(P_density);

	const float h_sq = _EffectiveRadius * _EffectiveRadius;
	float2 acceleration = float2(0, 0);

	// Calculate the acceleration based on neighbors from the 8 adjacent cells + current cell
	int2 G_xy = (int2)GridCalculateCell(P_position);
	for (int y = max(G_xy.y - 1, 0); y <= min(G_xy.y + 1, 255); y++)
	{
		for (int x = max(G_xy.x - 1, 0); x <= min(G_xy.x + 1, 255); x++)
		{
			uint G_cell = GridConstructKey(uint2(x, y));
			uint2 G_start_end = _GridIndicesRead[G_cell];
			for (uint N_id = G_start_end.x; N_id < G_start_end.y; N_id++)
			{
				float2 N_position = _ParticlesRead[N_id].position;
				float2 diff = N_position - P_position;
				float r_sq = dot(diff, diff);
				if (r_sq < h_sq && P_id != N_id)
				{
					float2 N_velocity = _ParticlesRead[N_id].velocity;
					float N_density = _ParticlesDensityRead[N_id].density;
					float N_pressure = CalculatePressure(N_density);
					float r = sqrt(r_sq);

					// Pressure Term
					acceleration += CalculateGradPressure(r, P_pressure, N_pressure, N_density, diff);

					// Viscosity Term
					acceleration += CalculateLapVelocity(r, P_velocity, N_velocity, N_density);
				}
			}
		}
	}
	_ParticlesForceWrite[P_id].acceleration = acceleration / P_density;
}

//--------------------------------------------------------------------------------------
// Integration
//--------------------------------------------------------------------------------------

[numthreads(BLOCK_SIZE, 1, 1)]
void Integrate(uint3 DTid : SV_DispatchThreadID)
{
	const uint P_id = DTid.x;

	float2 position     = _ParticlesRead[P_id].position;
	float2 velocity     = _ParticlesRead[P_id].velocity;
	float2 acceleration = _ParticlesForceRead[P_id].acceleration;
	float2 gravity      = _Gravity.xy;

	[unroll]
	for (uint j = 0; j < 4; j++)
	{
		float dist = dot(float3(position, 1), _WallNormals[j].xyz);
		acceleration += min(dist, 0) * -_WallStiffness * _WallNormals[j].xy;
	}

	// Apply gravity
	acceleration += gravity;

	// Integrate
	velocity += _TimeStep * acceleration;
	position += _TimeStep * velocity;

	// Update
	_ParticlesWrite[P_id].position = position;
	_ParticlesWrite[P_id].velocity = velocity;
}

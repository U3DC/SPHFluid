#pragma kernel Density
#pragma kernel Force
#pragma kernel Integrate

#include "UnityCG.cginc"
#define BLOCK_SIZE 32

struct Particle
{
	float2 position;
	float2 velocity;
};

struct ParticleForce
{
	float2 acceleration;
};

struct ParticleDensity
{
	float  density;
};

cbuffer Constants : register( b0 )
{
	float  _RestDensity;
	float  _PressureCoef;
	float  _Mass;
	float  _EffectiveRadius;
	float  _TimeStep;
	float  _Viscosity;
	float  _WallStiffness;
	float  _ParticleGap;
	float4 _Gravity;
	float2 _MinBoundary;
	float2 _MaxBoundary;
	int    _MaxParticles;
	float  _Poly6Kernel;
	float  _SpikeyKernel;
	float  _LapKernel;
	float4 _WallNormals[4];
}

StructuredBuffer<Particle> _ParticlesRead : register( t0 );
RWStructuredBuffer<Particle> _ParticlesWrite : register( u0 );

StructuredBuffer<ParticleDensity> _ParticlesDensityRead : register( t1 );
RWStructuredBuffer<ParticleDensity> _ParticlesDensityWrite : register( u0 );

StructuredBuffer<ParticleForce> _ParticlesForceRead : register( t2);
RWStructuredBuffer<ParticleForce> _ParticlesForceWrite : register( u0 );

//--------------------------------------------------------------------------------------
// Density Calculation
//--------------------------------------------------------------------------------------

float CalculateDensity(float r_sq)
{
	const float h_sq = _EffectiveRadius * _EffectiveRadius;
	// Implements this equation:
	// W_poly6(r, h) = 315 / (64 * PI * h^9) * (h^2 - r^2)^3
	// g_fDensityCoef = fParticleMass * 315.0f / (64.0f * PI * fSmoothlen^9)
	// return g_fDensityCoef * (h_sq - r_sq) * (h_sq - r_sq) * (h_sq - r_sq);
	return _Mass * _Poly6Kernel * (h_sq - r_sq) * (h_sq - r_sq) * (h_sq - r_sq);
}

groupshared float2 density_shared_pos[BLOCK_SIZE];
[numthreads(BLOCK_SIZE, 1, 1)]
void Density(uint3 DTid : SV_DispatchThreadID, uint GI : SV_GroupIndex)
{
	const uint i = DTid.x;
	const float h_sq = _EffectiveRadius * _EffectiveRadius;
	float2 P_position = _ParticlesRead[i].position;
	float density = 0;

	[loop]
	for (uint blockID = 0; blockID < (uint)_MaxParticles; blockID += BLOCK_SIZE)
	{
		// Cache a tile of particles to shared memory to increase IO efficiency
		density_shared_pos[GI] = _ParticlesRead[blockID + GI].position;

		GroupMemoryBarrierWithGroupSync();

		for (uint tileID = 0; tileID < BLOCK_SIZE; tileID++)
		{
			float2 N_position = density_shared_pos[tileID];
			float2 diff = N_position - P_position;
			float r_sq = dot(diff, diff);
			if (r_sq < h_sq)
			{
				density += CalculateDensity(r_sq);
			}
		}

		GroupMemoryBarrierWithGroupSync();
	}

	_ParticlesDensityWrite[i].density = density;
}

//--------------------------------------------------------------------------------------
// Force Calculation
//--------------------------------------------------------------------------------------

float CalculatePressure(float density)
{
	// Implements this equation (Tait Equation):
	// Pressure = B * ((rho / rho_0)^y  - 1)
	// B : 圧力定数, rho : 密度, rho_0 : 初期密度, y : 物質定数
	return _PressureCoef * max(pow(density / _RestDensity, 3) - 1, 0);
}

float2 CalculateGradPressure(float r, float P_pressure, float N_pressure, float N_density, float2 diff)
{
	const float h = _EffectiveRadius;
	float avgPressure = 0.5f * (N_pressure + P_pressure);
	// Implements this function:
	// GRAD( W_spikey(r, h) ) = -45 / (PI * h^6) * (h - r)^2
	// r : 相対距離, h : 有効半径
	// g_fGradPressureCoef = fParticleMass * -45.0f / (PI * fSmoothlen^6)
	// return g_fGradPressureCoef * avg_pressure / N_density * (h - r) * (h - r) / r * (diff);
	return _Mass * _SpikeyKernel * avgPressure / N_density * (h - r) * (h - r) / r * diff;
}

float2 CalculateLapVelocity(float r, float2 P_velocity, float2 N_velocity, float N_density)
{
	const float h = _EffectiveRadius;
	float2 velDiff = (N_velocity - P_velocity);
	// Implements this equation:
	// W_viscosity(r, h) = 15 / (2 * PI * h^3) * (-r^3 / (2 * h^3) + r^2 / h^2 + h / (2 * r) - 1)
	// LAPLACIAN( W_viscosity(r, h) ) = 45 / (PI * h^6) * (h - r)
	// r : 相対距離, h : 有効半径
	// g_fLapViscosityCoef = fParticleMass * fViscosity * 45.0f / (PI * fSmoothlen^6)
	// return g_fLapViscosityCoef / N_density * (h - r) * vel_diff;
	return _Mass * _Viscosity * _LapKernel / N_density * (h - r) * velDiff;
}

groupshared struct { 
	float2 position;
	float2 velocity;
	float density;
} force_shared_pos[BLOCK_SIZE];

[numthreads(BLOCK_SIZE, 1, 1)]
void Force(uint3 DTid : SV_DispatchThreadID, uint GI : SV_GroupIndex)
{
	const uint i = DTid.x;
	float2 P_position = _ParticlesRead[i].position;
	float2 P_velocity = _ParticlesRead[i].velocity;
	float  P_density  = _ParticlesDensityRead[i].density;
	float  P_pressure = CalculatePressure(P_density);
	const float h_sq = _EffectiveRadius * _EffectiveRadius;
	float2 acceleration = float2(0, 0);

	[loop]
	for (uint blockID = 0; blockID < (uint)_MaxParticles; blockID += BLOCK_SIZE)
	{
		// Cache a tile of partilces to shared memory to increase IO efficiency
		force_shared_pos[GI].position = _ParticlesRead[blockID + GI].position;
		force_shared_pos[GI].velocity = _ParticlesRead[blockID + GI].velocity;
		force_shared_pos[GI].density = _ParticlesDensityRead[blockID + GI].density;

		GroupMemoryBarrierWithGroupSync();

		[loop]
		for (uint tileID = 0; tileID < BLOCK_SIZE; tileID++)
		{
			uint j = blockID + tileID;
			float2 N_position = force_shared_pos[tileID].position;

			float2 diff = N_position - P_position;
			float r_sq = dot(diff, diff);
			if (r_sq < h_sq && i != j)
			{
				float2 N_velocity = force_shared_pos[tileID].velocity;
				float N_density = force_shared_pos[tileID].density;
				float N_pressure = CalculatePressure(N_density);
				float r = sqrt(r_sq);

				// Pressure Term
				acceleration += CalculateGradPressure(r, P_pressure, N_pressure, N_density, diff);

				// Viscosity Term
				acceleration += CalculateLapVelocity(r, P_velocity, N_velocity, N_density);
			}
		}

		GroupMemoryBarrierWithGroupSync();
	}
	_ParticlesForceWrite[i].acceleration = acceleration / P_density;
}

//--------------------------------------------------------------------------------------
// Integration
//--------------------------------------------------------------------------------------

[numthreads(BLOCK_SIZE, 1, 1)]
void Integrate(uint3 DTid : SV_DispatchThreadID)
{
	const uint i = DTid.x;
	float2 position     = _ParticlesRead[i].position;
	float2 velocity     = _ParticlesRead[i].velocity;
	float2 acceleration = _ParticlesForceRead[i].acceleration;
	float2 gravity      = _Gravity.xy;

	[unroll]
	for (uint j = 0; j < 4; j++)
	{
		float dist = dot(float3(position, 1), _WallNormals[j].xyz);
		acceleration += min(dist, 0) * -_WallStiffness * _WallNormals[j].xy;
	}

	// Apply gravity
	acceleration += gravity;

	// Integrate
	velocity += _TimeStep * acceleration;
	position += _TimeStep * velocity;

	// Update
	_ParticlesWrite[i].position = position;
	_ParticlesWrite[i].velocity = velocity;
}
